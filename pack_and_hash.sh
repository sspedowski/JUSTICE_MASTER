#!/usr/bin/env bash
# pack_and_hash.sh
# Usage: ./pack_and_hash.sh <input-path> <out-name>
# If input-path is a zip, it will be extracted. Otherwise it should be a directory.
set -euo pipefail

INPUT="$1"
OUTNAME="${2:-EVIDENCE_PACKAGE}"

STAMP=$(date +%Y%m%d-%H%M%S)
WORKDIR="package-${STAMP}"
mkdir -p "$WORKDIR"

cleanup() {
  rm -rf "$TMPDIR"
}
trap cleanup EXIT

if [[ "${INPUT,,}" == *.zip ]]; then
  # Input is zip; extract to tmp
  TMPDIR=$(mktemp -d)
  echo "Extracting ZIP to $TMPDIR"
  unzip -q "$INPUT" -d "$TMPDIR"
  rsync -a "$TMPDIR/" "$WORKDIR/"
else
  # Assume directory
  rsync -a "$INPUT/" "$WORKDIR/"
fi

MANIFEST="$WORKDIR/MANIFEST.csv"
COC="$WORKDIR/COC.md"

# Generate manifest header
echo "Path,SizeBytes,SHA256" > "$MANIFEST"

# Walk files
find "$WORKDIR" -type f -print0 | sort -z | while IFS= read -r -d $'\0' file; do
  rel=${file#${WORKDIR}/}
  size=$(stat -c%s "$file")
  sha=$(sha256sum "$file" | awk '{print $1}')
  echo "\"$rel\",$size,$sha" >> "$MANIFEST"
done

# Update COC
now=$(date -u +%Y-%m-%dT%H:%M:%SZ)
if [[ ! -f "$COC" ]]; then
  echo "date_utc,handler_name,action,notes" > "$COC"
fi
echo "$now,pack_and_hash,packaged,Generated by pack_and_hash.sh" >> "$COC"

# Create archive
ZIPNAME="${OUTNAME}-${STAMP}.zip"
zip -r -q "$ZIPNAME" "$WORKDIR"
zipsha=$(sha256sum "$ZIPNAME" | awk '{print $1}')
# Append archive hash to manifest
echo "ARCHIVE,$ZIPNAME,$zipsha" >> "$MANIFEST"

printf "Created archive: %s\nManifest: %s\nCOC: %s\nArchive SHA-256: %s\n" "$ZIPNAME" "$MANIFEST" "$COC" "$zipsha"

exit 0
